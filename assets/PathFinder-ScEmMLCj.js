import{r as F,f as z,u as W,g as G,c as J,w as y,i as u,a as k,o as Q,b as _,d as v,t as B,e as M,n as X}from"./index-DAUaz_Ma.js";const Y="/svgs/clock.svg",Z={style:{width:"100%",display:"flex"}},ee=_("div",{class:"flex items-center gap-2 px-1",style:{"white-space":"nowrap","text-align":"center","vertical-align":"center",display:"flex","flex-direction":"row"}},[_("img",{src:Y,style:{height:"30px",width:"30px"}})],-1),te={style:{"white-space":"nowrap","margin-left":"10px","margin-right":"10px",color:"#FED053","user-select":"none"}},oe={style:{color:"#FED053","user-select":"none",margin:"5%"}},ne={style:{color:"#FED053","user-select":"none"}},re={__name:"PathFinder",setup(se){const R=u("toast"),C=u("loadingInProgress"),L=u("loadStreetPoints"),O=u("loadStationTimetables"),x=u("busLinesMap"),f=u("selectedStartStation"),S=u("selectedDestinationStation"),E=u("streetPoints"),D=u("travelRoute");u("terminalNames");const N=u("processTimetables"),h=u("busStationsMap"),$=u("metroBusStationsMap"),j=u("graph"),T=u("stationsAndBusses"),P=F(!0),I=z(),A=W(),w=(e,s,r)=>{if(!s){console.error("attempt to get next departure time on non-existent timetable");return}for(let n of s)if(r){if(n.i===r&&n.minutes>=e)return n}else if(n.minutes>=e)return n;return null},K=(e,s,r)=>{for(let n of s)if(n.minutes>=e&&r.indexOf(n.i)>=0)return n;return null},b=F([]),H=F(null),U=(e,s)=>{console.log("towards",s);const r=new Date;let n=r.getHours()*60+r.getMinutes(),t=null,l=w(n,e[0].timetable,t);if(l==null){console.error("no bus found at departure time");return}else if(l&&!x.has(l.i)){console.error("bus not found in map");return}else if(!l){console.error("ha-ha-ha : check the code logic (javascript rules!!!) - nextDepartureTime !== null but undefined");return}const a=[];t=x.get(l.i);for(let o=0;o<e.length;o++){if(t.s.indexOf(e[o].i)<0){const c=w(n,e[o-1].timetable,t.i);console.log(`${o} drop off bus ${t.n} station ${e[o-1].n} ${e[o-1].i} arrival ${c.time}`),b.value.push({n:t.n,c:t.c,tc:t.tc,time:c.time,station:e[o-1].n,op:"hop off"});const d=`${e[o-1].i}-${e[o].i}`;if(!T.has(d)){console.error("stations and busses is missing key",d);return}const g=T.get(d),m=K(n,e[o-1].timetable,g);m!==null?(t=x.get(m.i),n=m.minutes,console.log(`${o} hop on bus ${t.n} station ${e[o-1].n} ${e[o-1].i} arrival ${m.time}`),b.value.push({n:t.n,c:t.c,tc:t.tc,time:c.time,station:e[o-1].n,op:"hop on"})):console.error(`${o} no busses found between`,e[o-1].n,e[o].n,e[o-1].i,e[o].i,g)}if(l=w(n,e[o].timetable,t.i),l===null){console.log(`${o} nextDepartureTime is null`);break}o>0&&a.push({f:e[o-1].i,t:e[o].i,c:t.c}),n=l.minutes,console.log(`${o} bus ${t.n} station ${e[o].n} ${e[o].i} arrival ${l.time}`),b.value.push({n:t.n,c:t.c,tc:t.tc,time:l.time,station:e[o].n,op:"ride"})}a.push({f:e[e.length-1].i,t:s.i,c:t.c});const p=w(n,s.timetable,t.i);if(p!==null)console.log(`final drop off bus ${t.n} station ${s.n} ${s.i} arrival ${p.time}`),b.value.push({n:t.n,c:t.c,tc:t.tc,time:p.time,station:s.n,op:"hop off"}),n=p.minutes;else{if(!t.si){console.error(`current bus has no sibling ${t.i}`);return}if(!x.has(t.si)){console.error(`sibling bus not found in the bus lines map ${t.i} ${t.si}`);return}const o=x.get(t.si);o?h.forEach((i,c,d)=>{for(let g=0;g<i.busses.length;g++)if(i.busses[g].i===o.i&&i.n===s.n){if(!i.timetable){console.error(`timetable is missing for station ${i.n} [${i.i}]`);break}const m=w(n,i.timetable,o.i);m!==null?(console.log(`final drop off sibling bus ${t.n} station ${i.n} ${i.i} arrival ${m.time}`),b.value.push({n:t.n,c:t.c,tc:t.tc,time:m.time}),n=m.minutes):console.error("error finding next departure time of the sibling bus",o.i,s.i);break}}):console.error("error finding sibling bus")}if(p!==null){const o=Math.floor(n/60),i=n-o*60;console.log("arrival",o,i)}return console.log("route",b.value),a},V=async(e,s)=>{const r=j.findRoute(e,s),n=[],t=[],l=[],a=[];f.value.timetable||t.push(O(f.value.i,f.value,N,()=>{console.error("error loading time tables",f.value.i),R.add({severity:"error",summary:`Error loading timetables for ${f.value.n}`,life:3e3}),C.value=!1})),n.push(f.value),l.push(e);for(let p=1;p<r.length;p++){const o=r[p-1],i=r[p],c=`${o}-${i}`;let d;if(h.has(i))d=h.get(i);else if($.has(i))d=$.get(i);else{console.error(`could not find target station ${i} in bus stations map`);return}if(E.has(c)?a.push({f:o,t:i,d:E.get(c)}):t.push(L(c,m=>{E.set(c,m),a.push({f:o,t:i,d:m})},()=>{console.error(`error loading street points ${c}`)})),d.timetable||t.push(O(i,d,N,()=>{console.error("error loading time tables",i),R.add({severity:"error",summary:`Error loading timetables for ${d.n}`,life:3e3}),C.value=!1})),n.push(d),l.push(i),!T.has(c)){console.error(`stations key ${c} was not found while looking for busses ids`,d);continue}const g=T.get(c);console.log("station",d.i,d.n,c,g)}await Promise.all(t),U(n,S.value),D.value||(D.value={}),D.value.nodes=l,D.value.edges=a};G(async()=>{const e=parseInt(I.params.startStationId);if(!f.value){let r;if(h.has(e))r=h.get(e);else if($.has(e))r=$.get(e);else{console.error(`could not find start station ${e} in bus stations map`);return}f.value=r}const s=parseInt(I.params.endStationId);if(!S.value){let r;if(h.has(s))r=h.get(s);else if($.has(s))r=$.get(s);else{console.error(`could not find destination station ${s} in bus stations map`);return}S.value=r}await V(e,s)});const q=()=>{const e=parseInt(I.params.startStationId),s=parseInt(I.params.endStationId);A.push({name:"main",query:{startStation:e,endStation:s}})};return(e,s)=>{const r=k("Tag"),n=k("Column"),t=k("DataTable"),l=k("Drawer");return Q(),J(l,{visible:P.value,"onUpdate:visible":s[1]||(s[1]=a=>P.value=a),onHide:q,style:{"background-color":"#1E232B"}},{header:y(()=>[_("div",Z,[v(r,null,{default:y(()=>[ee]),_:1}),_("h2",te,B(M(f)?M(f).n:"?")+" - "+B(M(S)?M(S).n:"?"),1)])]),default:y(()=>[v(t,{selection:H.value,"onUpdate:selection":s[0]||(s[0]=a=>H.value=a),value:b.value,selectionMode:"single",scrollable:"",scrollHeight:"flex",style:{"background-color":"#1E232B"}},{default:y(()=>[v(n,{header:"Bus",style:{color:"#FED053","user-select":"none"}},{body:y(a=>[v(r,{rounded:!0,value:a.data.n,style:X({minWidth:"40px",userSelect:"none",fontFamily:"TheLedDisplaySt",backgroundColor:a.data.c,color:a.data.tc})},null,8,["value","style"]),_("span",oe,B(a.data.to),1)]),_:1}),v(n,{header:"Station",field:"station"}),v(n,{header:"Op",field:"op"}),v(n,{header:"Time"},{body:y(a=>[_("span",ne,B(a.data.time),1)]),_:1})]),_:1},8,["selection","value"])]),_:1},8,["visible"])}}};export{re as default};
