import{r as T,f as X,u as Z,g as ee,c as te,w as y,i as f,a as B,o as se,b as D,d as _,t as F,e as M,n as K}from"./index-C-0x0Y6P.js";const oe="/svgs/clock.svg",ne={style:{width:"100%",display:"flex"}},re=D("div",{class:"flex items-center gap-2 px-1",style:{"white-space":"nowrap","text-align":"center","vertical-align":"center",display:"flex","flex-direction":"row"}},[D("img",{src:oe,style:{height:"30px",width:"30px"}})],-1),ie={style:{"white-space":"nowrap","margin-left":"10px","margin-right":"10px",color:"#FED053","user-select":"none"}},le={style:{color:"#FED053","user-select":"none",margin:"5%"}},ce={__name:"PathFinder",setup(ae){const P=f("toast"),C=f("loadingInProgress"),L=f("loadDirectPathFinder"),N=f("loadStreetPoints"),O=f("loadStationTimetables"),S=f("busLinesMap"),b=f("selectedStartStation"),p=f("selectedDestinationStation"),g=f("streetPoints"),k=f("travelRoute"),U=f("terminalNames"),H=f("processTimetables"),$=f("busStationsMap"),x=f("metroBusStationsMap"),V=T(!0),E=X(),q=Z(),w=(e,n,r)=>{if(!n){console.error("attempt to get next departure time on non-existent timetable");return}for(let s of n)if(r){if(s.i===r&&s.minutes>=e)return s}else if(s.minutes>=e)return s;return null},z=(e,n,r)=>{for(let s of n)if(s.minutes>=e&&r.indexOf(s.i)>=0)return s;return null},W=(e,n)=>{const r=[];return S.forEach((s,i,u)=>{for(let d=1;d<s.s.length-1;d++)s.s[d-1]===e&&s.s[d]===n&&r.push(s.i)}),r},Y=(e,n)=>{const r=new Date;let s=r.getHours()*60+r.getMinutes(),i=null,u=w(s,e[0].timetable,i);if(u==null){console.error("no bus found at departure time");return}else if(u&&!S.has(u.i)){console.error("bus not found in map");return}else if(!u){console.error("ha-ha-ha : check the code logic (javascript rules!!!) - nextDepartureTime !== null but undefined");return}const d=[];i=S.get(u.i);for(let t=0;t<e.length;t++){if(i.s.indexOf(e[t].i)<0){const v=w(s,e[t-1].timetable,i.i);console.log(`${t} drop off bus ${i.n} station ${e[t-1].n} ${e[t-1].i} arrival ${v.time}`);const a=W(e[t-1].i,e[t].i),c=z(s,e[t-1].timetable,a);c!==null?(i=S.get(c.i),s=c.minutes,console.log(`${t} hop on bus ${i.n} station ${e[t-1].n} ${e[t-1].i} arrival ${c.time}`)):console.error(`${t} no busses found between`,e[t-1].n,e[t].n,e[t-1].i,e[t].i,a)}if(u=w(s,e[t].timetable,i.i),u===null){console.log(`${t} nextDepartureTime is null`);break}t>0&&d.push({f:e[t-1].i,t:e[t].i,c:i.c}),s=u.minutes,console.log(`${t} bus ${i.n} station ${e[t].n} ${e[t].i} arrival ${u.time}`)}d.push({f:e[e.length-1].i,t:n.i,c:i.c});const l=w(s,n.timetable,i.i);if(l!==null)console.log(`final drop off bus ${i.n} station ${n.n} ${n.i} arrival ${l.time}`),s=l.minutes;else{if(!i.si){console.error(`current bus has no sibling ${i.i}`);return}if(!S.has(i.si)){console.error(`sibling bus not found in the bus lines map ${i.i} ${i.si}`);return}const t=S.get(i.si);t?$.forEach((o,v,a)=>{for(let c=0;c<o.busses.length;c++)if(o.busses[c].i===t.i&&o.n===n.n){if(!o.timetable){console.error(`timetable is missing for station ${o.n} [${o.i}]`);break}const h=w(s,o.timetable,t.i);h!==null?(console.log(`final drop off sibling bus ${i.n} station ${o.n} ${o.i} arrival ${h.time}`),s=h.minutes):console.error("error finding next departure time of the sibling bus",t.i,n.i);break}}):console.error("error finding sibling bus")}if(l!==null){const t=Math.floor(s/60),o=s-t*60;console.log("arrival",t,o)}return d},A=async()=>{const e=b.value.i,n=p.value.i;await L(e,async r=>{for(let s=0;s<r.length;s++){if(n!==r[s].t)continue;if(r[s].cross){console.log("just cross the god damn street, ok?");return}if(!r[s].s){console.error("target station has no solutions array");return}const i=[],u=[],d=[],l=[];i.push(b.value),d.push(e);for(let t=0;t<r[s].s.length;t++){const o=r[s].s[t];if(!o.s||o.s.length===0){console.error("solution has no stations array");return}console.log(`solution ${t+1} : ${b.value.n} to ${p.value.n} [${e}-${n}]`),console.log(`solution ${t+1} => `,o.s);for(let a=0;a<o.s.length;a++){const c=o.s[a];if(a===0){const m=`${e}-${o.s[a]}`;g.has(m)?l.push({f:`${e}`,t:`${o.s[a]}`,d:g.get(m)}):u.push(N(m,I=>{g.set(m,I),l.push({f:`${e}`,t:`${o.s[a]}`,d:I})},()=>{console.error(`error loading street points ${m}`)}))}else if(a<o.s.length-1){const m=`${o.s[a-1]}-${o.s[a]}`;g.has(m)?l.push({f:`${o.s[a-1]}`,t:`${o.s[a]}`,d:g.get(m)}):u.push(N(m,I=>{g.set(m,I),l.push({f:`${o.s[a-1]}`,t:`${o.s[a]}`,d:I})},()=>{console.error(`error loading street points ${m}`)}))}let h;if($.has(c))h=$.get(c);else if(x.has(c))h=x.get(c);else{console.error(`could not find target station ${c} in bus stations map`);return}d.push(c),i.push(h),u.push(O(c,h,H,()=>{console.error("error loading time tables",c),P.add({severity:"error",summary:"Error loading timetables",life:3e3}),C.value=!1}))}p.value.t&&console.log("YES, destination is a terminal",U[p.value.n]);const v=`${o.s[o.s.length-1]}-${n}`;g.has(v)?l.push({f:`${o.s[o.s.length-1]}`,t:`${n}`,d:g.get(v)}):u.push(N(`${o.s[o.s.length-1]}-${n}`,a=>{g.set(v,a),l.push({f:`${o.s[o.s.length-1]}`,t:`${n}`,d:a})},()=>{console.error(`error loading street points ${v}`)}))}d.push(p.value.i),u.push(O(p.value.i,p.value,H,()=>{console.error("error loading time tables",p.value.i),P.add({severity:"error",summary:"Error loading timetables",life:3e3}),C.value=!1})),await Promise.all(u),Y(i,p.value),k.value||(k.value={}),k.value.nodes=d,k.value.edges=l}},()=>{P.add({severity:"error",summary:"Error loading pathfinding",life:3e3}),C.value=!1})};ee(async()=>{const e=parseInt(E.params.startStationId),n=parseInt(E.params.endStationId);if(!b.value){let r;if($.has(e))r=$.get(e);else if(x.has(e))r=x.get(e);else{console.error(`could not find start station ${e} in bus stations map`);return}b.value=r}if(!p.value){let r;if($.has(n))r=$.get(n);else if(x.has(n))r=x.get(n);else{console.error(`could not find destination station ${n} in bus stations map`);return}p.value=r}await A()});const G=T([]),J=T([]),j=T(null),R=T(null),Q=()=>{const e=parseInt(E.params.startStationId),n=parseInt(E.params.endStationId);q.push({name:"main",query:{startStation:e,endStation:n}})};return(e,n)=>{const r=B("Tag"),s=B("SelectButton"),i=B("Column"),u=B("DataTable"),d=B("Drawer");return se(),te(d,{visible:V.value,"onUpdate:visible":n[2]||(n[2]=l=>V.value=l),onHide:Q,style:{"background-color":"#1E232B"}},{header:y(()=>[D("div",ne,[_(r,null,{default:y(()=>[re]),_:1}),D("h2",ie,F(M(b)?M(b).n:"?")+" - "+F(M(p)?M(p).n:"?"),1)])]),default:y(()=>[_(u,{ref:"busTable",selection:R.value,"onUpdate:selection":n[1]||(n[1]=l=>R.value=l),value:J.value,selectionMode:"single",scrollable:"",scrollHeight:"flex",style:{"background-color":"#1E232B"}},{header:y(()=>[_(s,{modelValue:j.value,"onUpdate:modelValue":n[0]||(n[0]=l=>j.value=l),options:G.value,"aria-labelledby":"basic",style:{display:"flex",width:"100%"}},null,8,["modelValue","options"])]),default:y(()=>[_(i,{header:"Bus",style:{color:"#FED053","user-select":"none"}},{body:y(l=>[_(r,{rounded:!0,value:l.data.n,style:K({minWidth:"40px",userSelect:"none",fontFamily:"TheLedDisplaySt",backgroundColor:l.data.c,color:l.data.tc})},null,8,["value","style"]),D("span",le,F(l.data.to),1)]),_:1}),_(i,{header:"Time"},{body:y(l=>[D("span",{style:K(l.data.future?"color: #FED053;user-select: none;":"color: #3B3F46;user-select: none;")},F(l.data.time),5)]),_:1})]),_:1},8,["selection","value"])]),_:1},8,["visible"])}}};export{ce as default};
